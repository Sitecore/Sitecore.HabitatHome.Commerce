---
ID: "41cc2aec-4b7b-4665-98d4-94c7275d96d2"
Parent: "28d0286e-5ee1-4be0-9aee-41d76fa2f651"
Template: "962b53c4-f93b-4df9-9821-415c867b8903"
Path: "/sitecore/media library/Themes/Habitat SXA Sites/Habitat Home Store/scripts/components/Cart/habitathome-feature-cart-delivery-model"
DB: master
SharedFields:
- ID: "40e50ed9-ba07-4702-992e-a912738d32dc"
  Hint: Blob
  BlobID: "97a219ac-df5d-47b5-9ed0-6387cfa4276f"
  Value: 
- ID: "6954b7c7-2487-423f-8600-436cb3b6dc0e"
  Hint: Size
  Value: 50326
- ID: "6f47a0a5-9c94-4b48-abeb-42d38def6054"
  Hint: Mime Type
  Value: "application/x-javascript"
- ID: "c06867fe-9a43-4c7d-b739-48780492d06f"
  Hint: Extension
  Value: js
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Value: "20190819T180335:637018346154186403Z"
