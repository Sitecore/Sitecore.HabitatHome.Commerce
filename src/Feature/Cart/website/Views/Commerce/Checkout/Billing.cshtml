@*//-----------------------------------------------------------------------
    // Copyright 2016 Sitecore Corporation A/S
    // Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
    // except in compliance with the License. You may obtain a copy of the License at
    //       http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software distributed under the
    // License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
    // either express or implied. See the License for the specific language governing permissions
    // and limitations under the License.
    // -------------------------------------------------------------------------------------------*@
@using System.Web.Mvc.Html
@using Sitecore.XA.Foundation.MarkupDecorator.Extensions
@using Sitecore.XA.Foundation.SitecoreExtensions.Extensions
@using Sitecore.Commerce.XA.Foundation.Common.Models
@using Sitecore.Commerce.XA.Feature.Cart.Models
@using Sitecore.Mvc
@model BillingRenderingModel

<div @Html.Sxa().Component("cxa-checkoutbilling-component", Model.Attributes)>
    @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
    {
        @Model.ErrorMessage
    }
    else
    {
        var currentItem = Html.Sitecore().CurrentItem;

        var prevButtonLink = Model.PreviousPageLink;
        var prevButtonLabel = Html.Sitecore().Field("Previous Button Label", currentItem);
        var nextvButtonLabel = Html.Sitecore().Field("Next Button Label", currentItem);
        var processing = currentItem["Next Button In-progress Label"];
        var otherAddressLabel = currentItem["Choose Another Address Hint Text"];

        // Contact Labels
        var contactInfoHeaderLabel = Html.Sitecore().Field("Contact Information Header", currentItem);
        var emailAddressLabel = Html.Sitecore().Field("Email Address Label", currentItem);
        var emailAddressLabelPlaceholder = currentItem["Email Address Label"];
        var confirmEmailAddressLabel = Html.Sitecore().Field("Confirm Email Address Label", currentItem);
        var confirmEmailAddressLabelPlaceholder = currentItem["Confirm Email Address Label"];
        var emailMustMatchMessage = @Html.Sitecore().CurrentItem["Email Must Match Message"];

        //Credit Card Labels
        var paymentOptionsHeaderLabel = Html.Sitecore().Field("Payment Options Header", currentItem);
        var cardNumberLabel = Html.Sitecore().Field("Card Number Hint Text", currentItem);
        var cardNumberLabelPlaceholder = currentItem["Card Number Hint Text"];
        var expirationDateLabel = Html.Sitecore().Field("Expiration Date Hint Text", currentItem);

        //Billing Labels
        var billingAddressHeaderLabel = Html.Sitecore().Field("Billing Address Header", currentItem);
        var billingNameLabel = Html.Sitecore().Field("Billing Name Label", currentItem);
        var billingNameLabelPlaceholder = currentItem["Billing Name Label"];
        var addressLabel = Html.Sitecore().Field("Address Label", currentItem);
        var addressLabelPlaceholder = currentItem["Address Label"];
        var cityLabel = Html.Sitecore().Field("City Label", currentItem);
        var cityLabelPlaceholder = currentItem["City Label"];
        var zipCodeLabel = Html.Sitecore().Field("Zip Code Label", currentItem);
        var zipCodeLabelPlaceholder = currentItem["Zip Code Label"];
        var countryLabel = Html.Sitecore().Field("Country Label", currentItem);
        var validatePaymentLabel = Html.Sitecore().Field("Validate Payment Button Label", currentItem);
        var stateLabel = Html.Sitecore().Field("State Label", currentItem);
        var stateLabelPlaceholder = currentItem["State Label"];
        var sameAsShipping = Html.Sitecore().Field("Same Shipping Address Text", currentItem);

        // Loyalty & Giftcards Labels
        var promocardsHeaderLabel = Html.Sitecore().Field("Gift Cards Header", currentItem);
        var applyGiftLabel = Html.Sitecore().Field("Apply Gift Card Header", currentItem);
        var subtitleGiftLabel = Html.Sitecore().Field("Subtitle Gift Label", currentItem);
        var paymentAmountLabel = Html.Sitecore().Field("Payment Amount Label", currentItem);
        var paymentAmountLabelPlaceholder = currentItem["Payment Amount Label"];
        var getBalanceButtonLabel = Html.Sitecore().Field("Get Balance Button Label", currentItem);
        var applyFullAmountButtonLabel = Html.Sitecore().Field("Apply Amount Button Label", currentItem);
        var addGiftCardButtonLabel = Html.Sitecore().Field("Add Gift Card Button Label", currentItem);
        var giftCardLabel = Html.Sitecore().Field("Gift Card Label", currentItem);
        var removeLabel = Html.Sitecore().Field("Remove Label", currentItem);
        var gettingBalanceLabel = currentItem["Get Balance Button In-progress Label"];

        // Payment Information Labels
        var paymentInfoHeaderLabel = Html.Sitecore().Field("Payment Info Header", currentItem);
        var applyCreditCardLabel = Html.Sitecore().Field("Apply Credit Card Header", currentItem);
        var paymentTotalLabel = Html.Sitecore().Field("Payment Total Label", currentItem);
        var taxesLabel = Html.Sitecore().Field("Taxes Label", currentItem);
        var savingsLabel = Html.Sitecore().Field("Savings Label", currentItem);
        var totalLabel = Html.Sitecore().Field("Total Label", currentItem);

        var creditCardLabel = Html.Sitecore().Field("Credit Card Label", currentItem);
        var orderInformationLabel = Html.Sitecore().Field("Order Information Header", currentItem);
        var subtotalLabel = Html.Sitecore().Field("Subtotal Label", currentItem);
        var shippingCostLabel = Html.Sitecore().Field("Shipping Cost Label", currentItem);

        <div id="component-content">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.Sitecore().FormHandler()

                <div class="contact-info-section">
                    <h4 class="contact-info-header">@contactInfoHeaderLabel</h4>
                    <div class="contact-info-form">
                        <div class="email-address">
                            <label for="BillingInput-Email">@emailAddressLabel *</label>
                            <input type="text" class="email-input" placeholder="@emailAddressLabelPlaceholder" data-bind="value: billingEmail">
                        </div>
                        <div class="confirm-email">
                            <label>@confirmEmailAddressLabel *</label>
                            <input type="text" class="confirm-email-input" placeholder="@confirmEmailAddressLabelPlaceholder" data-bind="value: billingConfirmEmail">
                        </div>
                    </div>
                </div>


                <a href="#" class="apply-credit-card-toggle ccpayment">
                    <span class="credit-card-toggle-icon"></span>@applyCreditCardLabel
                </a>
                <div class="credit-card-payment-section" style="display: none">
                    <h4 class="credit-card-payment-header">Billing Information</h4>
                    <div class="credit-card-payment-form">
                        <div class="billing-paycard-container" style="display: none" data-bind="visible: payFederatedPayment(), with: creditCardPayment">
                            <div class="payment-method" data-bind="visible: $parent.payFederatedPayment() && !displayExistingPaymentMessage()">
                                <form class="external-payment-form">
                                    <div id="dropin-container"></div>
                                </form>
                                <div class="payment-amount">
                                    <div class="show-payment">
                                        <label for="creditCardPayment_Amount">@paymentAmountLabel *</label>
                                        <input type="text" class="form-control" name="amount" id="creditCardPayment_Amount" data-bind="value: formatCurrency(creditCardAmount, 2, '@Model.CurrencyDecimalSeparator', '@Model.CurrencySymbol', '@Model.CurrencyGroupSeparator', @Model.CurrencySymbolPosition)" disabled>
                                    </div>
                                    <button class="validate-payment-btn" type="submit">@validatePaymentLabel</button>
                                </div>
                                <div class="must-revalidate-payment" data-bind="visible: mustRevalidatePayment()">
                                    <span data-bind="text: mustRevalidatePaymentMessage()" />
                                </div>
                            </div>
                            <div class="reset-existing-payment" data-bind="visible: $parent.payFederatedPayment() && displayExistingPaymentMessage()">
                                <a class="existing-payment-reset-link" href="#">
                                    <span class="existing-payment-message" data-bind="text: existingPaymentMessage()" />
                                </a>
                            </div>
                        </div>
                        <div class="billing-address-container" data-bind="with: billingAddress">
                            <h4 class="billing-address-header">@billingAddressHeaderLabel</h4>
                            <div class="billing-address-dropdown">
                                <select class="select-billing-address" data-bind="foreach: $root.userAddresses, value: $parent.selectedBillingAddress, enable: $parent.creditCardEnable" title="@sameAsShipping">
                                    <!-- ko if: externalId() === 'UseShipping' && $root.isShipAll -->
                                    <option data-bind="attr:{ value:externalId }, text: fullAddress"></option>
                                    <!-- /ko -->
                                    <!-- ko if: externalId() !== 'UseShipping' -->
                                    <option data-bind="attr:{ value:externalId }, text: fullAddress"></option>
                                    <!-- /ko -->
                                </select>
                            </div>
                            <div class="billing-addresss-details">
                                <input type="hidden" id="billingAddress-ExternalId" data-bind="value: externalId" />
                                <div class="address-name">
                                    <label>@billingNameLabel *</label>
                                    <input type="text" class="address-name-textbox" placeholder="@billingNameLabelPlaceholder" data-bind="value: name, enable: $parent.billingAddressEnable">
                                </div>
                                <div class="address-street">
                                    <label>@addressLabel *</label>
                                    <input type="text" class="address-street-textbox" placeholder="@addressLabelPlaceholder" data-bind="value: address1, enable: $parent.billingAddressEnable">
                                </div>

                                <div class="address-city-name">
                                    <label>@cityLabel *</label>
                                    <input type="text" class="address-city-textbox" placeholder="@cityLabelPlaceholder" data-bind="value: city, enable: $parent.billingAddressEnable">
                                </div>
                                <div class="address-city-zipcode">
                                    <label>@zipCodeLabel *</label>
                                    <input type="text" class="address-zip-textbox" id="billingAddress-Zipcode" placeholder="@zipCodeLabelPlaceholder" data-bind="value: zipPostalCode, enable: $parent.billingAddressEnable">
                                </div>
                                <div class="address-country-name">

                                    <label>@countryLabel *</label>
                                    <select class="address-country-textbox" data-bind="options: $parent.countries, optionsText:'country', optionsValue:'code', value: country, enable: $parent.billingAddressEnable"></select>
                                </div>
                                <div class="address-state-name">
                                    <label>@stateLabel *</label>
                                    <!-- ko if: states == 'undefined' -->
                                    <select class="address-state-dropdown" data-bind="options: $parent.states, optionsText:'name', optionsValue:'code', value: state, enable: $parent.billingAddressEnable"></select>
                                    <!-- /ko -->
                                    <!-- ko if: states != 'undefined' -->
                                    <input type="text" class="address-state-textbox" id="billingAddress-State" placeholder="@stateLabelPlaceholder" data-bind="value: state, enable: $parent.billingAddressEnable">
                                    <!-- /ko -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <a href="#" class="apply-gift-card-toggle giftCardPayment">
                    <span><span class="apply-gift-card-toggle-icon"></span></span>@applyGiftLabel
                </a>
                <div class="apply-gift-card-section" data-bind="with: giftCardPayment" id="billingPayGiftCardContainer" style="display: none">
                    <h4 class="apply-gift-card-header">@promocardsHeaderLabel</h4>
                    <div class="apply-gif-card-content">
                        <h5 class="apply-gif-card-subtitle">@subtitleGiftLabel</h5>

                        <div class="apply-gif-card-balance">
                            <div class="payment-method">
                                <label>@cardNumberLabel *</label>
                                <input type="text" class="payment-method-id-textbox" id="giftCardPayment_PaymentMethodID" placeholder="@cardNumberLabelPlaceholder" data-bind="value: giftCardNumber, valueUpdate: 'afterkeydown'">
                            </div>
                            <div class="payment-get-balance">
                                <button type="button" class="get-balance-btn" data-loading-text="@gettingBalanceLabel" data-bind="click: getBalance, enable: giftCardNumber().length > 0">@getBalanceButtonLabel</button>
                            </div>
                        </div>
                        <div class="gift-card-balance" style="display:none;" data-attr="visible:formattedBalance ">
                            <div class="payment-total">
                                Balance: <span data-bind="text: formattedBalance"></span>
                            </div>
                        </div>
                        <div class="apply-gif-card-amount">
                            <div class="payment-amount">
                                <label>@paymentAmountLabel *</label>
                                <input type="text" class="payment-amount-textbox" id="giftCardPayment_Amount" placeholder="@paymentAmountLabelPlaceholder" data-bind="value: giftCardAmount, valueUpdate: 'afterkeydown'">
                            </div>
                            <div class="payment" style="text-align: right;">
                                <button type="button" class="apply-full-amount-btn" data-bind="enable: balance() > 0, click: applyBalance">@applyFullAmountButtonLabel</button>
                                <button type="button" class="gift-card-payment-btn" data-bind="enable: enableAddCard, click: addCard">@addGiftCardButtonLabel</button>
                            </div>
                        </div>

                        <div class="giftcard-status" style="display: none;" data-bind="visible: isAdded">
                            <!-- Only appears if a card has been added -->
                            <div class="applied-gift-card-info">
                                <span>@giftCardLabel:</span>
                                <span class="giftcard-payment-number" data-bind="text: giftCardNumber"></span>
                                <span> / </span>
                                <span class="giftcard-aplied-amount" data-bind="text: giftCardAmount"><span data-bind="text: $root.currencyCode"></span></span>

                            </div>
                            <div class="delete-applied-card">
                                <a href="#" class="remove-gift-card-link" data-bind="click: removeCard">@removeLabel</a>
                            </div>
                        </div>
                    </div>
                        </div>

                        <div class="billing-summary">
                            <div class="billing-payment-summary">
                                <div class="payment-info-header"><h4>@paymentInfoHeaderLabel</h4></div>
                                <div class="payment-summary order-summary-giftcard" data-bind="visible: $root.giftCardPayment().isAdded">
                                    <span>@giftCardLabel:</span>
                                    <div>
                                        <span class="billing-giftcard-amount" data-bind="text: formatCurrency($root.giftCardPayment().giftCardAmountRawValue, 2, '@Model.CurrencyDecimalSeparator', '@Model.CurrencySymbol', '@Model.CurrencyGroupSeparator', @Model.CurrencySymbolPosition)"></span>
                                        <span data-bind="text: $root.currencyCode"></span>
                                    </div>
                                </div>
                                <div class="payment-summary order-summary-creditcard" data-bind="visible: $root.creditCardPayment().isAdded">
                                    <span>@creditCardLabel:</span>
                                    <div>
                                        <span id="billing-creditcard-amount" data-bind="text: formatCurrency($root.creditCardPayment().creditCardAmount, 2, '@Model.CurrencyDecimalSeparator', '@Model.CurrencySymbol', '@Model.CurrencyGroupSeparator', @Model.CurrencySymbolPosition)"></span>
                                        <span data-bind="text: $root.currencyCode"></span>
                                    </div>
                                </div>
                                <div class="payment-summary order-summary-payment-total">
                                    <span>@paymentTotalLabel:</span>
                                    <span class="payment-total" data-bind="text: formatCurrency($root.paymentTotal(), 2, '@Model.CurrencyDecimalSeparator', '@Model.CurrencySymbol', '@Model.CurrencyGroupSeparator', @Model.CurrencySymbolPosition)"><span data-bind="text: $root.currencyCode"></span></span>
                                </div>
                            </div>
                            <div class="billing-total-summary">
                                <div class="order-information-header"><h4>@orderInformationLabel</h4></div>
                                <div class="order-summary order-summary-subtotal">
                                    <span>@subtotalLabel:</span>
                                    <span class="billing-subTotal" data-bind="text: cart().subTotal"></span>
                                </div>
                                <div class="order-summary order-summary-shipping-cost">
                                    <span>@shippingCostLabel:<span id="billingShippingCostLabel"></span></span>
                                    <span class="billing-shipping-cost" data-bind="text: cart().shippingTotal"></span>
                                </div>
                                <div class="order-summary order-summary-tax-total">
                                    <span>@taxesLabel:</span>
                                    <span class="billing-tax-total" data-bind="text: cart().taxTotal"></span>
                                </div>
                                <div class="order-summary order-summary-discount">
                                    <span>@savingsLabel:</span>
                                    <span class="billing-discount" data-bind="text: cart().discount"></span>
                                </div>
                                <div class="order-summary order-summary-total">
                                    <span>@totalLabel:</span>
                                    <span class="billing-order-total" data-bind="text: cart().total"></span>
                                </div>
                            </div>
                        </div>

                        <div class="buttons-row">
                            <a class="previous-button" href="@prevButtonLink">@prevButtonLabel</a>
                            <button class="to-confirm-button" data-loading-text="@processing" data-bind="enable: enableToConfirm, click: goToNextPageClick">@nextvButtonLabel</button>
                        </div>

                        }
                    </div>

        <div class="hidden">
            <input type="hidden" id="EmailsMustMatchMessage" value="@emailMustMatchMessage" />
            <input type="hidden" id="OtherAddressLabel" value="@otherAddressLabel" />
            <input type="hidden" id="BillingItemPath" value="@Model.DeliveryItemPath" />
        </div>
    }
</div>
